******************************************************************************
ubuntu下最好安装开发环境，安装过程中可能由于网络原因安装失败：
sudo apt-get install  build-essential
也可以单个包进行安装，如：
sudo apt-get install libc6-dev 
******************************************************************************
缺少io.h文件：
1、使用locate命令查找io.h，如果有这个文件，拷贝到/usr/include/sys目录下，编译时-I包含这个目录 
******************************************************************************
1、linux 32/64位动态库如何编译
-m32/-m64 ？
32位系统编译32位.so，64位编译64位.so ？
******************************************************************************
2、查看.so有哪些函数（.a使用nm -g **.a）
nm -D **.so
筛选／查找： nm **.so | grep XX
******************************************************************************
3、查看.so是32还是64位？
objdump -a *.so
******************************************************************************
调用.so：
使用dlopen等函数调用.so时，在链接成目标时需要-ldl参数

找不到pthread相关符号时，需要链接-lpthread
******************************************************************************
多个.a合成一个.a，即用多个.a编译成一个.a：
ar x libtest1.a		//导出.a中的符号到.o
ar x libtest2.a
ar rc liball.a *.o  //多个.o合成.a
******************************************************************************
查看.so依赖库：
ldd x.so
如果有找不到的依赖库拷贝至/usr/lib目录
******************************************************************************

注意：
1、makefile编译时，不要编译任何.h/.hpp头文件，本身它们是不参与编译的，如果把它们编译生成的.o文件链接成目标文件就会报错（x.o文件不能被识别）。如果其它.c文件用到这些头文件，在编译.c文件时，用-I包含头文件即可
2、每个.c文件编译成一个.o文件，不能多个.c生成一个.o文件
3、生成调试信息，编译时需要使用-g参数
4、编译选项-O0，意思是不进行编译优化。gdb在默认情况下会使用-O2优化编译，调试时打印变量会出现<optimized out>。
5、C++调用C程序，注意extern "C"的使用

